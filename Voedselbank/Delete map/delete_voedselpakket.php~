<?php
session_start();
include 'db_connect.php'; // Include your database connection script

// Check if the user is logged in and has the admin role
// Redirect if not admin (role 1), medewerker (role 2), or vrijwilliger (role 3)
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 1 && $_SESSION['role'] != 2 && $_SESSION['role'] != 3)) {
    header("Location: login.php");
    exit;
}

// Check if an ID is provided
if (isset($_GET['id'])) {
    $id = intval($_GET['id']);

    // Function to restore stock of products associated with a voedselpakket
    function restoreProductStock($conn, $voedselpakket_id) {
        // Retrieve all products and their quantities from producten_has_voedselpakketen
        $sql = "SELECT Producten_idProducten, Aantal FROM producten_has_voedselpakketen WHERE Voedselpakketen_idVoedselpakketen = ?";
        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            die("Prepare failed: " . $conn->error);
        }
        $stmt->bind_param("i", $voedselpakket_id);
        $stmt->execute();
        $result = $stmt->get_result();

        // Loop through each product and restore its stock
        while ($row = $result->fetch_assoc()) {
            $product_id = $row['Producten_idProducten'];
            $aantal = $row['Aantal'];

            // Update the stock in the producten table
            $updateSql = "UPDATE producten SET aantal = aantal + ? WHERE idProducten = ?";
            $updateStmt = $conn->prepare($updateSql);
            if (!$updateStmt) {
                die("Prepare failed: " . $conn->error);
            }
            $updateStmt->bind_param("ii", $aantal, $product_id);
            if (!$updateStmt->execute()) {
                die("Failed to restore stock: " . $updateStmt->error);
            }
        }

        $stmt->close();
    }

    // Function to delete records from the producten_has_voedselpakketen table
    function deleteVoedselpakketProducts($conn, $id) {
        // First, restore the product stock before deletion
        restoreProductStock($conn, $id);

        // Then delete the products linked to the voedselpakket
        $sql = "DELETE FROM producten_has_voedselpakketen WHERE Voedselpakketen_idVoedselpakketen = ?";
        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            die("Prepare failed: " . $conn->error);
        }
        $stmt->bind_param("i", $id);
        if (!$stmt->execute()) {
            die("Execute failed: " . $stmt->error);
        }
        return $stmt->affected_rows > 0;
    }

    // Function to delete a voedselpakket
    function deleteVoedselpakket($conn, $id) {
        // Start a transaction
        $conn->begin_transaction();

        // Delete related records first and restore stock
        if (!deleteVoedselpakketProducts($conn, $id)) {
            $conn->rollback();
            return false;
        }

        // Now delete the voedselpakket itself
        $sql = "DELETE FROM voedselpakketen WHERE idVoedselpakketen = ?";
        $stmt = $conn->prepare($sql);
        if (!$stmt) {
            die("Prepare failed: " . $conn->error);
        }
        $stmt->bind_param("i", $id);
        if (!$stmt->execute()) {
            $conn->rollback(); // Roll back transaction if deletion fails
            die("Execute failed: " . $stmt->error);
        }

        // Commit the transaction if everything is successful
        $conn->commit();
        return $stmt->affected_rows > 0;
    }

    // Attempt to delete the voedselpakket
    if (deleteVoedselpakket($conn, $id)) {
        echo "<script>alert('Voedselpakket successfully deleted and stock restored.'); window.location.href='voedselpakket.php';</script>";
    } else {
        echo "<script>alert('Failed to delete voedselpakket.'); window.location.href='voedselpakket.php';</script>";
    }
} else {
    // Redirect back if no ID is provided
    header("Location: voedselpakket.php");
    exit;
}

$conn->close();
?>
